{"version":3,"sources":["components/Day.jsx","components/Calendar.jsx","App.js","serviceWorker.js","index.js"],"names":["Day","this","props","dayContent","date","substring","hours","eventTime","getEventTime","eventHour","newTime","parseInt","i","title","push","react_default","a","createElement","reactjs_popup_es","trigger","renderBigAppointment","key","database_id","modal","closeOnDocumentClick","renderAppointmentContent","toString","className","inDescription","inLocation","mapBaseUrl","lat","lng","href","target","rel","inAttendents","attKey","outAttendents","attendentLink","length","descriptionDisplay","description","style","fontStyle","handleAppointmentDescription","handleAppointmentLocation","location","handleAppointmentAttendents","attendents","renderSmallAppointment","renderHours","currentView","renderMonthContent","renderFullContent","React","Component","Calendar","state","currentMonth","Date","currentWeek","selectedDate","onDateClick","day","_this","setState","nextMonth","dateFns","addMonths","prevMonth","subMonths","nextWeek","addDays","addWeeks","prevWeek","subDays","subWeeks","datesFromInput","dateForComponent","contentOut","compDate","format","viewToBeChecked","newView","dayIn","_this2","onClick","changeView","viewIn","checkCurrentView","renderPrevSwitches","renderNextSwitches","days","startDate","startOfISOWeek","monthStart","cloneDay","formattedDate","_this3","dayThings","components_Day","checkIfSameDate","calendarEvents","concat","isSameMonth","isSameDay","parse","_this$state","startOfMonth","monthEnd","endOfMonth","endDate","endOfISOWeek","rows","renderOverviewCells","renderViewSelector","renderHeader","renderDays","renderCells","App","decryptionKey","axios","get","headers","x-teamengine-test","then","response","bytes","cryptoJS","decrypt","data","decryptedData","JSON","Utf8","events","catch","error","console","log","e","preventDefault","decryptInputField","value","id","onSubmit","handleSubmit","type","name","getData","renderDecryptBox","components_Calendar","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7da7ec53.chunk.js","sourcesContent":["import React from \"react\";\nimport Popup from 'reactjs-popup';\n\nclass Day extends React.Component {\n\n    getEventTime() {\n        if (this.props.dayContent !== \"\") {\n            return this.props.dayContent.date.substring(11);\n        } else {\n            return this.props.dayContent;\n        }\n    }\n\n    renderHours() {\n        const hours = [];\n        let eventTime = this.getEventTime();\n        let eventHour = 0;\n        let newTime = \"\";\n        if (eventTime !== \"\") {\n            eventHour = parseInt(eventTime.substring(0,2), 0);\n        }\n        for (let i = 0; i < 24; i++) {\n            if (eventHour === i && eventHour !== 0 && this.props.dayContent.title != null) {\n                hours.push(\n                    <Popup trigger={this.renderBigAppointment()} key={this.props.dayContent.database_id * 1000} modal closeOnDocumentClick>\n                        {this.renderAppointmentContent()}\n                    </Popup>\n                );\n                if (i < 10) {\n                    newTime = \"0\" + i.toString() + \":00\";\n                } else {\n                    newTime = i.toString() + \":00\";\n                }\n                hours.push(\n                    <div className=\"hourCell\" key={i}>{newTime}</div>\n                )\n            } else {\n                if (i < 10) {\n                    newTime = \"0\" + i.toString() + \":00\";\n                } else {\n                    newTime = i.toString() + \":00\";\n                }\n                hours.push(\n                    <div className=\"hourCell\" key={i}>{newTime}</div>\n                )\n            }\n        }\n        return hours;\n    }\n\n    handleAppointmentDescription(inDescription) {\n        return (\n            <div>\n                {inDescription}\n            </div>\n        );\n    }\n\n    handleAppointmentLocation(inLocation) {\n        let mapBaseUrl = \"https://www.google.com/maps/place/\" + inLocation.lat + \",\" + inLocation.lng;\n        return (\n            <p>\n                <a href={mapBaseUrl} target=\"_blank\" rel=\"noopener noreferrer\">Link to map!</a>\n            </p>\n        );\n    }\n\n    handleAppointmentAttendents(inAttendents) {\n        let attKey = this.props.dayContent.database_id * 100;\n        let outAttendents = [<h3 key={attKey}> Attendents:</h3>];\n        let attendentLink = \"\";\n        for (let i = 0; i < inAttendents.length; i++) {\n            attendentLink = \"mailto:\" + inAttendents[i];\n            outAttendents.push(\n                <p key={i}><a href={attendentLink} target=\"_top\">{inAttendents[i]}</a></p>\n            );\n        }\n        return(\n            <div>\n                {outAttendents}\n            </div>\n        );\n    }\n\n    renderSmallAppointment() {\n        return  (\n            <div className={(this.getEventTime() === \"\") ? \"monthContent\" : \"monthContent appointment\"} >\n                <div>\n                    {this.getEventTime()}<br />\n                    {this.props.dayContent.title}\n                </div>\n            </div>\n            );\n    }\n\n    renderBigAppointment() {\n        let descriptionDisplay = this.props.dayContent.description;\n        if (descriptionDisplay.length > 13) {\n            descriptionDisplay = this.props.dayContent.description + \"...\";\n        }\n        return (\n            <div className={(this.getEventTime() === \"\") ? \"bigContent\" : \"bigContent appointment\"} >\n                <div>\n                    <p>{this.getEventTime()}</p>\n                    <p><b>{this.props.dayContent.title}</b></p>\n                    <p style={{fontStyle: 'italic'}}>{descriptionDisplay}</p>\n                </div>\n            </div>\n        );\n    }\n\n    renderAppointmentContent() {\n        if (this.getEventTime() === \"\") {\n            return \"\";\n        } else {\n            return(\n                <div className=\"appointmentContent\">\n                    <h2>{this.props.dayContent.title}</h2>\n                    {this.handleAppointmentDescription(this.props.dayContent.description)}\n                    {this.handleAppointmentLocation(this.props.dayContent.location)}\n                    {this.handleAppointmentAttendents(this.props.dayContent.attendents)}\n                </div>\n            );\n        }\n    }\n\n    renderMonthContent() {\n        if (this.props.dayContent.title != null) {\n            return (\n                <Popup\n                trigger={this.renderSmallAppointment()}\n                modal\n                closeOnDocumentClick\n                >\n                    {this.renderAppointmentContent()}\n                </Popup>\n            );\n        } else {\n            return \"\";\n        }\n    }\n\n    renderFullContent() {\n        return this.renderHours();\n    }\n\n    render() {\n        return(\n            <div className=\"day\">\n                {(this.props.currentView === 'month') ? this.renderMonthContent() : this.renderFullContent()}\n            </div>\n        );\n    }\n}\n\nexport default Day;","import React from \"react\";\nimport dateFns from \"date-fns\";\nimport Day from './Day';\n\nclass Calendar extends React.Component {\n    state = {\n        currentMonth: new Date(),\n        currentWeek: new Date(),\n        selectedDate: new Date(),\n        currentView: 'month'\n    }\n\n    checkIfSameDate(datesFromInput, dateForComponent) {\n        let contentOut = \"\";\n        let inDate = \"\";\n        let compDate = dateFns.format(dateForComponent, 'YYYY-MM-DD');\n        if (datesFromInput != null) {\n            for (let i = 0; i < datesFromInput.length; i++) {\n                inDate = datesFromInput[i].date.substring(0,10);\n                if (inDate === compDate) {\n                    contentOut = datesFromInput[i];\n                }\n            }\n        }\n        return contentOut;\n    }\n\n    checkCurrentView(viewToBeChecked) {\n        if (viewToBeChecked === this.state.currentView) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    changeView(newView) {\n        this.setState({\n            currentView: newView\n        });\n    }\n\n    weekDayName(dayIn) {\n        const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        return dayNames[dayIn];\n    }\n\n    renderViewSelector() {\n        return (\n            <div className=\"viewSelector row row-middle\">\n                    <div className=\"col col-start\"><strong>View:</strong></div>\n                    <div className=\"col col-center viewOption\" onClick={() => this.changeView('month')}>Month</div>\n                    <div className=\"col col-end viewOption\" onClick={() => this.changeView('week')}>Week</div>\n            </div>\n        )\n    }\n\n    renderPrevSwitches(viewIn) {\n        if (this.checkCurrentView('month')) {\n            return (\n                <div className=\"icon\" onClick={this.prevMonth}>\n                    chevron_left\n                </div>\n            );\n        } else if (this.checkCurrentView('week')) {\n            return (\n                <div className=\"icon\" onClick={this.prevWeek}>\n                    chevron_left\n                </div>\n            );\n        }\n    }\n\n    renderNextSwitches(viewIn) {\n        if (this.checkCurrentView('month')) {\n            return (\n                <div className=\"icon\" onClick={this.nextMonth}>\n                    chevron_right\n                </div>\n            );\n        } else if (this.checkCurrentView('week')) {\n            return (\n                <div className=\"icon\" onClick={this.nextWeek}>\n                    chevron_right\n                </div>\n            );\n        }\n    }\n\n    renderHeader() {\n        const dateFormat = \"MMMM YYYY\";\n\n        return (\n            <div className=\"header row flex-middle\">\n                <div className=\"col col-start\">\n                    {this.renderPrevSwitches(this.state.currentView)}\n                </div>\n                <div className=\"col col-center\">\n                    <span>\n                        {dateFns.format(this.state.currentMonth, dateFormat)}\n                    </span>\n                </div>\n                <div className=\"col col-end\">\n                    {this.renderNextSwitches(this.state.currentView)}\n                </div>\n            </div>\n        );\n    }\n\n    renderDays() {\n        const dateFormat = \"dddd\";\n        const days = [];\n\n        let startDate = dateFns.startOfISOWeek(this.state.currentMonth);\n\n        for (let i = 0; i < 7; i++) {\n            days.push(\n                <div className=\"col col-center\" key={i}>\n                    {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n                </div>\n            );\n        }\n        return <div className=\"days row\">{days}</div>;\n    }\n\n    renderOverviewCells(day, monthStart, selectedDate, cloneDay, formattedDate) {\n        let dayThings = \"\";\n        if (this.checkCurrentView('week')) {\n            dayThings = <Day currentView={this.state.currentView} dayContent={this.checkIfSameDate(this.props.calendarEvents, cloneDay)} />;\n        } else {\n            dayThings = <Day currentView={this.state.currentView} dayContent={this.checkIfSameDate(this.props.calendarEvents, cloneDay)} />;\n        }\n        return(\n            <div\n                className={`col cell ${\n                    !dateFns.isSameMonth(day, monthStart)\n                        ? \"disabled \"\n                        : dateFns.isSameDay(day, selectedDate) ? \"selected \" : \" \"\n                    }` + this.state.currentView}\n                key={day}\n                onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\n            >\n                {dayThings}\n                <span className=\"bg\">{formattedDate}</span>\n                <span className=\"number\">{formattedDate}</span>\n            </div>\n        );\n    }\n\n    renderCells() {\n        const { currentMonth, selectedDate } = this.state;\n        const monthStart = dateFns.startOfMonth(currentMonth);\n        const monthEnd = dateFns.endOfMonth(monthStart);\n        let startDate = dateFns.startOfISOWeek(monthStart);\n        let endDate = dateFns.endOfISOWeek(monthEnd);\n\n        const dateFormat = \"D\";\n        const rows = [];\n\n        if (this.checkCurrentView('week')) {\n            startDate = dateFns.startOfISOWeek(selectedDate);\n            endDate = dateFns.endOfISOWeek(selectedDate);\n        }\n\n        let days = [];\n        let day = startDate;\n        let formattedDate = \"\";\n\n        while (day <= endDate) {\n            for (let i = 0; i < 7; i++) {\n                formattedDate = dateFns.format(day, dateFormat);\n                const cloneDay = day;\n                days.push(\n                    this.renderOverviewCells(day, monthStart, selectedDate, cloneDay, formattedDate)\n                );\n                day = dateFns.addDays(day, 1);\n            }\n            rows.push(\n                <div className=\"row\" key={day}>\n                    {days}\n                </div>\n            );\n            days = [];\n        }\n        if (this.checkCurrentView('month')) {\n            return <div className=\"body\">{rows}</div>\n        } else if (this.checkCurrentView('week')) {\n            return <div className=\"body\">{rows}</div>\n        }\n    }\n\n    onDateClick = day => {\n        this.setState({\n            selectedDate: day\n        });\n    };\n\n    nextMonth = () => {\n        this.setState({\n            currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n        });\n    }\n\n    prevMonth = () => {\n        this.setState({\n            currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n        });\n    }\n\n    nextWeek = () => {\n        this.setState({\n            selectedDate: dateFns.addDays(this.state.selectedDate, 7),\n            currentWeek: dateFns.addWeeks(this.state.currentWeek, 1),\n            currentMonth: dateFns.addDays(this.state.selectedDate, 7)\n        });\n    }\n\n    prevWeek = () => {\n        this.setState({\n            selectedDate: dateFns.subDays(this.state.selectedDate, 7),\n            currentWeek: dateFns.subWeeks(this.state.currentWeek, 1),\n            currentMonth: dateFns.subDays(this.state.selectedDate, 7)\n        });\n    }\n\n    render () {\n        return (\n            <div className=\"calendar\">\n                {this.renderViewSelector()}\n                {this.renderHeader()}\n                {this.renderDays()}\n                {this.renderCells()}\n            </div>\n        );\n    }\n}\n\nexport default Calendar;","import React, { Component } from 'react';\nimport Calendar from './components/Calendar';\nimport './App.css';\nimport axios from 'axios';\nimport * as cryptoJS from 'crypto-js';\n\nclass App extends Component {\n  state = {\n    calendarEvents: [{\n      \"database_id\": 0,\n      \"date\": \"\",\n      \"title\": \"\",\n      \"description\": \"\",\n      \"location\": {\n        \"lat\": \"\",\n        \"lng\": \"\"\n      },\n      \"attendents\": [\n        \"\",\n        \"\",\n        \"\"\n      ]\n    }],\n    decryptionKey: \"\"\n  }\n\n  getData() {\n    axios.get('https://projects.teamengine.com/calendar/events', {\n      headers: {\n        'x-teamengine-test': \"YfKFyOBnLBvudfn\"\n      }\n    })\n      .then((response) => {\n        let bytes = cryptoJS.AES.decrypt(response.data, this.state.decryptionKey);\n        let decryptedData = JSON.parse(bytes.toString(cryptoJS.enc.Utf8));\n        this.setState({\n          calendarEvents: decryptedData.events\n        })\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.setState({decryptionKey: e.target.decryptInputField.value});\n  }\n\n  renderDecryptBox() {\n    if (this.state.decryptionKey === \"\") {\n      return (\n        <div id=\"decryptInputBox\">\n          <label>\n            Input your decryption key:\n              <form onSubmit={(e) => this.handleSubmit(e)}>\n              <input\n                id=\"decryptInputField\"\n                type=\"text\"\n                name=\"decryptionKey\"\n              />\n            </form>\n          </label>\n        </div>\n      );\n    } else {\n      return \"\";\n    }\n  }\n\n  componentDidUpdate() {\n    this.getData();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div id=\"logo\">\n            <span className=\"icon\">calendar_today</span>\n            <span>\n              simple<b>cal</b>\n            </span>\n          </div>\n          {this.renderDecryptBox()}\n        </header>\n        <main>\n          <Calendar calendarEvents={this.state.calendarEvents} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}